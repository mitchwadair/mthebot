name: Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and tar
        run: |
          # Tar required files for server/build
          mkdir ../build
          rsync -av \
            --exclude=.git \
            --exclude=/docs/ \
            --exclude=.github \
            --exclude=/assets/ \
            --exclude=/"API Server"/"Postman Collections"/ \
            . ../build
          tar --exclude='.git' -czf deploy.tar.gz -C ../build .

      - name: Copy files to Droplet
        run: |
          # Copy files to droplet using scp
          ssh -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP }} "mkdir -p ${{ secrets.SERVER_DIRECTORY }}/${{ github.sha }}" 
          scp -o StrictHostKeyChecking=no deploy.tar.gz root@${{ secrets.DROPLET_IP }}:${{ secrets.SERVER_DIRECTORY }}/${{ github.sha }}/

      - name: Restart Server
        run: |
          # Connect to the droplet and restart the server
          ssh -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP }} <<EOF
            # Navigate to the server directory
            cd ${{ secrets.SERVER_DIRECTORY }}/${{ github.sha }}

            # Extract the build and remove the archive
            tar -xzf deploy.tar.gz
            rm deploy.tar.gz

            echo "${{ secrets.ENV_FILE }}" > .env

            # Ensure bun is up to date
            echo "Updating bun..."
            bun upgrade

            # Install deps fresh
            echo "Installing deps..."
            bun install

            # Find PID(s) of the server
            PIDS=\$(pgrep -f "bun .*app.js")
            # Kill old server
            if [ -n "\$PIDS" ]; then
              echo "Found Bun process(es) app.js: \$PIDS. Shutting down..."
              for pid in \$PIDS; do
                kill -SIGTERM "\$pid"
                echo "Waiting for \$pid to exit..."
                if ! timeout 90s tail --pid=\$pid -f /dev/null; then
                  echo "Timeout waiting for PID \$pid. May not have shut down cleanly."
                else
                  echo "Process \$pid exited gracefully."
                fi
              done
            else
              echo "No Bun processes matching app.js found."
            fi

            # Run server
            nohup bun ./app.js &> /dev/null &
            disown

            # Clean up old build(s)
            cd ../
            if [ "\$(basename \$(pwd))" != "\$(basename ${{ secrets.SERVER_DIRECTORY }})" ]; then
              echo "Not in expected build directory name! Aborting cleanup."
              exit 1
            fi
            for dir in \$(ls -A | grep -v "${{ github.sha }}"); do
              rm -rf "\$dir"
            done
            echo "Cleaned old builds"
            echo "âœ… Deployment completed successfully"
          EOF